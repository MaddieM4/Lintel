.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Plack::Test 3pm"
.TH Plack::Test 3pm "2015-06-19" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Plack::Test \- Test PSGI applications with various backends
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Plack::Test;
\&  use HTTP::Request::Common;
\&
\&  # Simple OO interface
\&  my $app = sub { return [ 200, [], [ "Hello "] ] };
\&  my $test = Plack::Test\->create($app);
\&
\&  my $res = $test\->request(GET "/");
\&  is $res\->content, "Hello";
\&
\&  # traditional \- named params
\&  test_psgi
\&      app => sub {
\&          my $env = shift;
\&          return [ 200, [ \*(AqContent\-Type\*(Aq => \*(Aqtext/plain\*(Aq ], [ "Hello World" ] ],
\&      },
\&      client => sub {
\&          my $cb  = shift;
\&          my $req = HTTP::Request\->new(GET => "http://localhost/hello");
\&          my $res = $cb\->($req);
\&          like $res\->content, qr/Hello World/;
\&      };
\&
\&  # positional params (app, client)
\&  my $app = sub { return [ 200, [], [ "Hello "] ] };
\&  test_psgi $app, sub {
\&      my $cb  = shift;
\&      my $res = $cb\->(GET "/");
\&      is $res\->content, "Hello";
\&  };
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Plack::Test is a unified interface to test \s-1PSGI\s0 applications using
HTTP::Request and HTTP::Response objects. It also allows you to run \s-1PSGI\s0
applications in various ways. The default backend is \f(CW\*(C`Plack::Test::MockHTTP\*(C'\fR,
but you may also use any Plack::Handler implementation to run live \s-1HTTP\s0
requests against a web server.
.SH "METHODS"
.IX Header "METHODS"
.IP "create" 4
.IX Item "create"
.Vb 1
\&  $test = Plack::Test\->create($app, %options);
.Ve
.Sp
creates an instance of Plack::Test implementation class. \f(CW$app\fR has
to be a valid \s-1PSGI\s0 application code reference.
.IP "request" 4
.IX Item "request"
.Vb 1
\&  $res = $test\->request($request);
.Ve
.Sp
takes an HTTP::Request object, runs it through the \s-1PSGI\s0 application to
test and returns an HTTP::Response object.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
Plack::Test also provides a functional interface that takes two
callbacks, each of which represents \s-1PSGI\s0 application and \s-1HTTP\s0 client
code that tests the application.
.IP "test_psgi" 4
.IX Item "test_psgi"
.Vb 2
\&  test_psgi $app, $client;
\&  test_psgi app => $app, client => $client;
.Ve
.Sp
Runs the client test code \f(CW$client\fR against a \s-1PSGI\s0 application
\&\f(CW$app\fR. The client callback gets one argument \f(CW$cb\fR, a
callback that accepts an \f(CW\*(C`HTTP::Request\*(C'\fR object and returns an
\&\f(CW\*(C`HTTP::Response\*(C'\fR object.
.Sp
Use HTTP::Request::Common to import shortcuts for creating requests for
\&\f(CW\*(C`GET\*(C'\fR, \f(CW\*(C`POST\*(C'\fR, \f(CW\*(C`DELETE\*(C'\fR, and \f(CW\*(C`PUT\*(C'\fR operations.
.Sp
For your convenience, the \f(CW\*(C`HTTP::Request\*(C'\fR given to the callback automatically
uses the \s-1HTTP\s0 protocol and the localhost (\fI127.0.0.1\fR by default), so the
following code just works:
.Sp
.Vb 5
\&  use HTTP::Request::Common;
\&  test_psgi $app, sub {
\&      my $cb  = shift;
\&      my $res = $cb\->(GET "/hello");
\&  };
.Ve
.Sp
Note that however, it is not a good idea to pass an arbitrary
(i.e. user-input) string to \f(CW\*(C`GET\*(C'\fR or even \f(CW\*(C`HTTP::Request\->new\*(C'\fR by assuming that it always represents a path,
because:
.Sp
.Vb 1
\&  my $req = GET "//foo/bar";
.Ve
.Sp
would represent a request for a \s-1URL\s0 that has no scheme, has a hostname
\&\fIfoo\fR and a path \fI/bar\fR, instead of a path \fI//foo/bar\fR which you
might actually want.
.SH "OPTIONS"
.IX Header "OPTIONS"
Specify the Plack::Test backend using the environment
variable \f(CW\*(C`PLACK_TEST_IMPL\*(C'\fR or \f(CW$Plack::Test::Impl\fR package variable.
.PP
The available values for the backend are:
.IP "MockHTTP" 4
.IX Item "MockHTTP"
(Default) Creates a \s-1PSGI\s0 env hash out of HTTP::Request object, runs
the \s-1PSGI\s0 application in-process and returns HTTP::Response.
.IP "Server" 4
.IX Item "Server"
Runs one of Plack::Handler backends (\f(CW\*(C`Standalone\*(C'\fR by default) and
sends live \s-1HTTP\s0 requests to test.
.IP "ExternalServer" 4
.IX Item "ExternalServer"
Runs tests against an external server specified in the
\&\f(CW\*(C`PLACK_TEST_EXTERNALSERVER_URI\*(C'\fR environment variable instead of spawning the
application in a server locally.
.PP
For instance, test your application with the \f(CW\*(C`HTTP::Server::ServerSimple\*(C'\fR
server backend with:
.PP
.Vb 2
\&  > env PLACK_TEST_IMPL=Server PLACK_SERVER=HTTP::Server::ServerSimple \e
\&    prove \-l t/test.t
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa
