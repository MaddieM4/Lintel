.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Data::Visitor::Callback 3pm"
.TH Data::Visitor::Callback 3pm "2013-06-24" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Data::Visitor::Callback \- A Data::Visitor with callbacks.
.SH "VERSION"
.IX Header "VERSION"
version 0.30
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Data::Visitor::Callback;
\&
\&        my $v = Data::Visitor::Callback\->new(
\&                # you can provide callbacks
\&                # $_ will contain the visited value
\&
\&                value => sub { ... },
\&                array => sub { ... },
\&
\&
\&                # you can also delegate to method names
\&                # this specific example will force traversal on objects, by using the
\&                # \*(Aqvisit_ref\*(Aq callback which normally traverse unblessed references
\&
\&                object => "visit_ref",
\&
\&
\&                # you can also use class names as callbacks
\&                # the callback will be invoked on all objects which inherit that class
\&
\&                \*(AqSome::Class\*(Aq => sub {
\&                        my ( $v, $obj ) = @_; # $v is the visitor
\&
\&                        ...
\&                },
\&        );
\&
\&        $v\->visit( $some_perl_value );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a Data::Visitor subclass that lets you invoke callbacks instead of
needing to subclass yourself.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "new %opts, %callbacks" 4
.el .IP "new \f(CW%opts\fR, \f(CW%callbacks\fR" 4
.IX Item "new %opts, %callbacks"
Construct a new visitor.
.Sp
The options supported are:
.RS 4
.IP "ignore_return_values" 4
.IX Item "ignore_return_values"
When this is true (off by default) the return values from the callbacks are
ignored, thus disabling the fmapping behavior as documented in
Data::Visitor.
.Sp
This is useful when you want to modify \f(CW$_\fR directly
.IP "tied_as_objects" 4
.IX Item "tied_as_objects"
Whether ot not to visit the \*(L"tied\*(R" in perlfunc of a tied structure instead of
pretending the structure is just a normal one.
.Sp
See \*(L"visit_tied\*(R" in Data::Visitor.
.RE
.RS 4
.RE
.SH "CALLBACKS"
.IX Header "CALLBACKS"
Use these keys for the corresponding callbacks.
.PP
The callback is in the form:
.PP
.Vb 2
\&        sub {
\&                my ( $visitor, $data ) = @_;
\&
\&                # or you can use $_, it\*(Aqs aliased
\&
\&                return $data; # or modified data
\&        }
.Ve
.PP
Within the callback \f(CW$_\fR is aliased to the data, and this is also passed in the
parameter list.
.PP
Any method can also be used as a callback:
.PP
.Vb 1
\&        object => "visit_ref", # visit objects anyway
.Ve
.IP "visit" 4
.IX Item "visit"
Called for all values
.IP "value" 4
.IX Item "value"
Called for non objects, non container (hash, array, glob or scalar ref) values.
.IP "ref_value" 4
.IX Item "ref_value"
Called after \f(CW\*(C`value\*(C'\fR, for references to regexes, globs and code.
.IP "plain_value" 4
.IX Item "plain_value"
Called after \f(CW\*(C`value\*(C'\fR for non references.
.IP "object" 4
.IX Item "object"
Called for blessed objects.
.Sp
Since \*(L"visit_object\*(R" in Data::Visitor will not recurse downwards unless you
delegate to \f(CW\*(C`visit_ref\*(C'\fR, you can specify \f(CW\*(C`visit_ref\*(C'\fR as the callback for
\&\f(CW\*(C`object\*(C'\fR in order to enter objects.
.Sp
It is reccomended that you specify the classes (or base classes) you want
though, instead of just visiting any object forcefully.
.IP "Some::Class" 4
.IX Item "Some::Class"
You can use any class name as a callback. This is colled only after the
\&\f(CW\*(C`object\*(C'\fR callback.
.Sp
If the object \f(CW\*(C`isa\*(C'\fR the class then the callback will fire.
.Sp
These callbacks are called from least derived to most derived by comparing the
classes' \f(CW\*(C`isa\*(C'\fR at construction time.
.IP "object_no_class" 4
.IX Item "object_no_class"
Called for every object that did not have a class callback.
.IP "object_final" 4
.IX Item "object_final"
The last callback called for objects, useful if you want to post process the
output of any class callbacks.
.IP "array" 4
.IX Item "array"
Called for array references.
.IP "hash" 4
.IX Item "hash"
Called for hash references.
.IP "glob" 4
.IX Item "glob"
Called for glob references.
.IP "scalar" 4
.IX Item "scalar"
Called for scalar references.
.IP "tied" 4
.IX Item "tied"
Called on the return value of \f(CW\*(C`tied\*(C'\fR for all tied containers. Also passes in
the variable as the second argument.
.IP "seen" 4
.IX Item "seen"
Called for a reference value encountered a second time.
.Sp
Passes in the result mapping as the second argument.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Yuval Kogman <nothingmuch@woobling.org>
.IP "\(bu" 4
Marcel Gru\*:nauer <marcel@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Yuval Kogman.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
