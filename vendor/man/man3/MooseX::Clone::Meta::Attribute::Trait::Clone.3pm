.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MooseX::Clone::Meta::Attribute::Trait::Clone 3pm"
.TH MooseX::Clone::Meta::Attribute::Trait::Clone 3pm "2015-05-23" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
MooseX::Clone::Meta::Attribute::Trait::Clone \- The attribute trait for deeply cloning attributes
.SH "VERSION"
.IX Header "VERSION"
version 0.06
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # see MooseX::Clone
\&
\&    has foo => (
\&        traits => [qw(Clone)],
\&        isa => "Something",
\&    );
\&
\&    $object\->clone; # will recursively call $object\->foo\->clone and set the value properly
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This meta attribute trait provides a \f(CW\*(C`clone_value\*(C'\fR method, in the spirit of
\&\f(CW\*(C`get_value\*(C'\fR and \f(CW\*(C`set_value\*(C'\fR. This allows clone methods such as the one in
MooseX::Clone to make use of this per-attribute cloning behavior.
.SH "DERIVATION"
.IX Header "DERIVATION"
Deriving this role for your own cloning purposes is encouraged.
.PP
This will allow your fine grained cloning semantics to interact with
MooseX::Clone in the RightX way.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "clone_only_objects" 4
.IX Item "clone_only_objects"
Whether or not Data::Visitor should be used to clone arbitrary structures.
Objects found in these structures will be cloned using clone_object_value.
.Sp
If true then non object values will be copied over in shallow cloning semantics
(shared reference).
.Sp
Defaults to false (all reference will be cloned).
.IP "clone_visitor_config" 4
.IX Item "clone_visitor_config"
A hash ref used to construct \f(CW\*(C`clone_visitor\*(C'\fR. Defaults to the empty ref.
.Sp
This can be used to alter the cloning behavior for non object values.
.IP "clone_visitor" 4
.IX Item "clone_visitor"
The Data::Visitor::Callback object that will be used to clone.
.Sp
It has an \f(CW\*(C`object\*(C'\fR handler that delegates to \f(CW\*(C`clone_object_value\*(C'\fR and sets
\&\f(CW\*(C`tied_as_objects\*(C'\fR to true in order to deeply clone tied structures while
retaining magic.
.Sp
Only used if \f(CW\*(C`clone_only_objects\*(C'\fR is false and the value of the attribute is
not an object.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "clone_value $target, $proto, %args" 4
.el .IP "clone_value \f(CW$target\fR, \f(CW$proto\fR, \f(CW%args\fR" 4
.IX Item "clone_value $target, $proto, %args"
Clones the value the attribute encapsulates from \f(CW$proto\fR into \f(CW$target\fR.
.ie n .IP "clone_value_data $value, %args" 4
.el .IP "clone_value_data \f(CW$value\fR, \f(CW%args\fR" 4
.IX Item "clone_value_data $value, %args"
Does the actual cloning of the value data by delegating to a \f(CW\*(C`clone\*(C'\fR method on
the object if any.
.Sp
If the object does not support a \f(CW\*(C`clone\*(C'\fR method an error is thrown.
.Sp
If the value is not an object then it will not be cloned.
.Sp
In the future support for deep cloning of simple refs will be added too.
.ie n .IP "clone_object_value $object, %args" 4
.el .IP "clone_object_value \f(CW$object\fR, \f(CW%args\fR" 4
.IX Item "clone_object_value $object, %args"
This is the actual workhorse of \f(CW\*(C`clone_value_data\*(C'\fR.
.ie n .IP "clone_any_value $value, %args" 4
.el .IP "clone_any_value \f(CW$value\fR, \f(CW%args\fR" 4
.IX Item "clone_any_value $value, %args"
Uses \f(CW\*(C`clone_visitor\*(C'\fR to clone all non object values.
.Sp
Called from \f(CW\*(C`clone_value_data\*(C'\fR if the value is not an object and
\&\f(CW\*(C`clone_only_objects\*(C'\fR is false.
.SH "AUTHOR"
.IX Header "AUTHOR"
\&\s-1XXXX XXX\s0'\s-1XX \s0(Yuval Kogman) <nothingmuch@woobling.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2008 by \s-1XXXX XXX\s0'\s-1XX \s0(Yuval Kogman).
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
